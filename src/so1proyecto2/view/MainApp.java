/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package so1proyecto2.view;

import java.util.ArrayList;
import java.util.Random;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import so1proyecto2.Proceso;


/**
 *
 * @author cesar
 */
public class MainApp extends javax.swing.JFrame {

    /**
     * Creates new form MainApp
     */
    private int nProcess = 0;
    private int quantum;
    private int memory = 2600000;
    private int pId = 1;
    ArrayList<Proceso> colaEspera = new ArrayList<Proceso>();
    Proceso[] process = new Proceso[13];

    public MainApp() {
        initComponents();
        this.quantum = getRandomNumberUsingNextInt(1000, 10000);
        jLblQuantum.setText("QUANTUM: " + String.valueOf(this.quantum) + " ms");

        resetTable((DefaultTableModel) jTblMemoria.getModel());
        resetTable((DefaultTableModel) jTblProcesos.getModel());
        setTable((DefaultTableModel) jTblMemoria.getModel());
    }

    public void resetTable(DefaultTableModel model){
        int rows = model.getRowCount();
        for(int i=rows-1; i >= 0; i--){ model.removeRow(i); }
    }

    public void setTable(DefaultTableModel model){
        resetTable(model);
        Object[] data = new Object[]{200000,0,200000,""};
        for(Proceso p : process){
            if(p == null){
                model.addRow(data);
            }else{
                model.addRow(new Object[]{200000,p.getSize(),200000-p.getSize(),p.getName()});
            }
        }
    }

    public void setTableProcess(DefaultTableModel model){
        resetTable(model);
        for(Proceso p : this.colaEspera){
            if(p != null){
                model.addRow(new Object[]{p.getName(),p.getPId(),"Suspendido",p.getSize()});
            }
        }
    }

    public void saveProcess(String name, int size){
        if(size < 4000000 && this.nProcess < 15/* && size <= this.memory*/){
            resetTable((DefaultTableModel) jTblMemoria.getModel());
            Proceso p = new Proceso(name, size, this.pId, this.quantum);
            this.pId += 1;
            //this.memory -= 200000;
            this.nProcess += 1;
            boolean flagAssign = true;

            float partitions = (float)p.getSize()/200000;
            System.out.println(partitions);

            if(partitions <= 0.00){
                partitions = 1;
                //System.out.println(partitions);
                //this.memory -= 200000;
            }else if(partitions - (int)partitions > 0.00){
                partitions = (int)partitions+1;
                //System.out.println(partitions);
                //this.memory -= 200000 * (int)partitions;
            }

            //System.out.println(this.memory);
           
            for(int i=0; i < 13; i++){
                if(this.process[i] == null && (int)partitions > 0 && this.memory >= p.getSize() && this.nProcess < 14){
                    Proceso pr = null;
                    if(size > 200000){
                        pr = new Proceso(p.getName(), 200000, p.getPId(), this.quantum);
                        size -= 200000;                        
                    }else{
                        pr = p;
                        p.setSize(size);
                    } 
                    this.memory -= 200000;
                    this.process[i] = pr;
                    flagAssign = false;
                    partitions -= 1;
                    //MemoryManager manager = new MemoryManager(pr, this.process, this.colaEspera, this.jTblMemoria, this.jTblProcesos);
                    //manager.run();
                }
            }

            if(flagAssign){
                this.colaEspera.add(p);
            }

            setTableProcess((DefaultTableModel) this.jTblProcesos.getModel());
            setTable((DefaultTableModel) jTblMemoria.getModel());

        }else{
            JOptionPane.showMessageDialog(null, "EL PROCESO EXCEDE EL NUMERO DE MEMORIA 4000000 O NUMERO DE PROCESO EXCEDIDO.");
        }
    }

    public int getRandomNumberUsingNextInt(int min, int max) {
        Random random = new Random();
        return random.nextInt(max - min) + min;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTblProcesos = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTblMemoria = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jBtnSave = new javax.swing.JButton();
        jTxtPName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTxtPMemoria = new javax.swing.JTextField();
        jLblQuantum = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PROYECTO 2 - CAMM");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(233, 233, 233));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));

        jTblProcesos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Proceso", "PID", "Estado", "Memoria (KB)"
            }
        ));
        jScrollPane1.setViewportView(jTblProcesos);

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("Procesos");

        jTblMemoria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Memoria (KB)", "En uso (KB)", "Disponible (KB)", "Procesos"
            }
        ));
        jScrollPane2.setViewportView(jTblMemoria);

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("Asignacion de memoria");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 15, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1))
                .addGap(19, 19, 19))
        );

        jBtnSave.setText("Guardar");
        jBtnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSaveActionPerformed(evt);
            }
        });

        jLabel1.setText("Proceso");

        jLabel2.setText("Memoria (KB)");
        jLabel2.setToolTipText("");

        jLblQuantum.setText("Quantum: 10000 ms");

        jButton1.setText("Iniciar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jTxtPName, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTxtPMemoria, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(jBtnSave)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLblQuantum)
                        .addGap(141, 141, 141)
                        .addComponent(jButton1)
                        .addGap(211, 211, 211))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTxtPName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxtPMemoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnSave)
                    .addComponent(jLblQuantum)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSaveActionPerformed
        // TODO add your handling code here:
        try{
            String name = jTxtPName.getText();
            int size = Integer.parseInt(jTxtPMemoria.getText());
            saveProcess(name, size);
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jBtnSaveActionPerformed

    public void agregarProceso(){

        for(int n = 0; n < this.colaEspera.size(); n++){
            Proceso p = this.colaEspera.get(n);
            int size = p.getSize();
            if(p.getSize() <= this.memory){
                float partitions = (float)p.getSize()/200000;

                if(partitions <= 0.00){
                    partitions = 1;
                }else if(partitions - (int)partitions > 0.00){
                    partitions = (int)partitions+1;
                }

                for(int i=0; i < 13; i++){
                    if(this.process[i] == null && (int)partitions > 0){
                        Proceso pr = null;
                        if(size > 200000){
                            pr = new Proceso(p.getName(), 200000, p.getPId(), this.quantum);
                            size -= 200000;                        
                        }else{
                            pr = p;
                            p.setSize(size);
                        } 
                        this.memory -= 200000;
                        this.process[i] = pr;
                        partitions -= 1;
                    }
                }
                this.colaEspera.remove(n);
            }
        }
        setTableProcess((DefaultTableModel) this.jTblProcesos.getModel());
        setTable((DefaultTableModel) jTblMemoria.getModel());
    }



    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try{
            //while(true){
                int np = getRandomNumberUsingNextInt(0, 13);
                System.out.println(np);
                if(this.process[np] != null){
                    this.memory += 200000;
                    Thread.sleep(this.process[np].getQuantum());
                    this.process[np] = null;
                    
                    setTable((DefaultTableModel) this.jTblMemoria.getModel());
                    agregarProceso();
                }
                //Thread.sleep(1000/*this.process[np].getQuantum()*/);

            //}
        }catch(Exception e){
           JOptionPane.showMessageDialog(null, e);
        }


    }//GEN-LAST:event_jButton1ActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            

            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainApp().setVisible(true);
            }
        });
    }



    public class MemoryManager extends Thread {

        Proceso proceso;
        ArrayList<Proceso> colaEspera;
        Proceso[] process;
        JTable jTblMemoria;
        JTable jTblProcesos;

        public MemoryManager(Proceso proceso, Proceso[] process, ArrayList<Proceso> colaEspera, JTable jTblMemoria, JTable jTblProcesos) {
            this.proceso = proceso;
            this.colaEspera = colaEspera;
            this.process = process;
            this.jTblMemoria = jTblMemoria;
            this.jTblProcesos = jTblProcesos;
        }

        @Override
        public void run() {
            try {
                //setTable((DefaultTableModel) this.jTblMemoria.getModel());
                System.out.println("CAMM DEBUG");
                Thread.sleep(proceso.getQuantum());

                for(int i = 0; i < this.process.length; i++){
                    if(this.process[i] != null){
                        if(this.process[i].equals(this.proceso)){
                            //System.out.println("CAMM TEST");
                            //this.process[i] = null;
                        }
                    }
                }
                //setTable((DefaultTableModel) this.jTblMemoria.getModel());
            } catch (InterruptedException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
            //System.out.println("borra cliente");
            /*barbero.getPanel().remove(barbero.getCliente().getLable());
            barbero.getPanel().repaint();
            barra.setValue(0);*/
        }

        public void resetTable(DefaultTableModel model){
            int rows = model.getRowCount();
            for(int i=rows-1; i >= 0; i--){ model.removeRow(i); }
        }

        public void setTable(DefaultTableModel model){
            resetTable(model);
            Object[] data = new Object[]{200000,0,200000,""};
            for(Proceso p : process){
                if(p == null){
                    model.addRow(data);
                }else{
                    model.addRow(new Object[]{200000,p.getSize(),200000-p.getSize(),p.getName()});
                }
            }
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnSave;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLblQuantum;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTblMemoria;
    private javax.swing.JTable jTblProcesos;
    private javax.swing.JTextField jTxtPMemoria;
    private javax.swing.JTextField jTxtPName;
    // End of variables declaration//GEN-END:variables
}
